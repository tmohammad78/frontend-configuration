user www-data;
# error_log   logs/error.log warn;
worker_processes 1;
events {}
http {

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

    server {
        listen 80;
        server_name "localhost";

        # enable gzip
        gzip on; 
        # Disable gzip for browsers that do not support it — this will disable gzip for IE4–6
        gzip_disable "msie6"; 
        #  Let the browser decide whether it will accept gzip.
        gzip_vary on; 
        # enables compression for all proxied requests.
        gzip_proxied any; 
        # This setting will set the compression level for gzip , Cranking it up will increase the work for your server 
        gzip_comp_level 6; 
        # Sets the number and size of buffers used to compress a response
        gzip_buffers 16 8k; 
        # Sets the minimum HTTP version of a request required to compress a response
        gzip_http_version 1.1; 
        gzip_types text/plain application/javascript text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype;
        
        # For service worker
        location ~* (/service-worker\.js)$ {
            add_header Cache-Control public;
            # no-store no-cache must-revalidate proxy-revalidate max-age=0
            # expires 0;
            # The off parameter disables adding or modifying the “Expires” and “Cache-Control” response header fields.
            gzip on;
            gzip_http_version 1.0;
        }

        location ~* ^.+\.(css|js|map|html|txt)$ {
            access_log off;
            try_files $uri =404;
            expires 20d; 
            # expire in 20 day
            # zip file
            gzip on;
            # add_header Cache_Control "public";
        }

        location ~* ^.+\.(eot|ttf|otf|woff|woff2)$ {
            access_log off;
            try_files $uri =404;    
            expires 20d;
            # add_header Cache_Control "public";
        }

        # location /api/ {
        #     proxy_pass  the url we want;
        #     proxy_set_header Host
        # };

        location / {
            if ( $uri = '/index.html' ) {
                add_header Cache-Control no-store always;
            }
            try_files $uri $uri/ /index.html;
        }

        error_page 500 502 503 504 /50x.html;
        # location =/50x.html {
        #     root /usr/share/nginx/html
        # }
    }
}